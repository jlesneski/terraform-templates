parameters:
  - name: terraformArtifactName
    type: string
    default: 'terraform'
    displayName: 'Name of the Terraform Plan artifact'
  - name: vmImage
    type: string
    default: 'ubuntu-latest'
    displayName: 'Pool vmImage' 
  - name: dependsOn
    type: string
    default: ''
    displayName: 'Name of the Stage which the Terraform Plan stage should wait on'
  - name: environment
    type: string
    default: ''
    displayName: 'Name of the Environemnt'
  - name: backendServiceAWS
    type: string
    default: 'lucidiaitAWS'
    displayName: 'Name of the Environemnt'
  - name: backendAWSBucketName
    type: string
    default: 'lucidiaterraform'
    displayName: 'Name of the Environemnt'
  - name: backendAWSKey
    type: string
    default: 'terraform/terraform.tfstate'
    displayName: 'Name of the Environemnt'

stages:
- stage: '${{ parameters.environment }}_PLAN'
  jobs:
    - job: '${{ parameters.environment }}_PLAN'
      pool:
        vmImage: ${{ parameters.vmImage }}
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: ${{ variables.ARTIFACT_NAME }}
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform latest'
      - script: |
          pwd
          ls -laR
        displayName: 'Command Line Script'
      - task: TerraformTaskV3@3
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          backendServiceAWS: ${{ parameters.backendServiceAWS }}
          backendAWSBucketName: ${{ parameters.backendAWSBucketName }}
          backendAWSKey: ${{ parameters.backendAWSKey }}
      - task: TerraformTaskV3@3
        displayName: 'TerraformWorkspace ${{ parameters.environment }}'
        inputs:
          provider: aws
          command: custom
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          customCommand: workspace
          commandOptions: 'select ${{ parameters.environment }}'
          environmentServiceNameAWS: ${{ parameters.backendServiceAWS }}
          backendServiceAWS: ${{ parameters.backendServiceAWS }}
          backendAWSBucketName: ${{ parameters.backendAWSBucketName }}
          backendAWSKey: ${{ parameters.backendAWSKey }}
      - task: TerraformTaskV3@3
        displayName: 'Terraform plan: aws'
        inputs:
          provider: aws
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: ${{ parameters.backendServiceAWS }}

- stage: '${{ parameters.environment }}_Apply'
  dependsOn: '${{ parameters.environment }}_PLAN'
  jobs:
    - deployment: ${{ parameters.environment }}
      environment: ${{ parameters.environment }}
    - job: 'Deploy_${{ parameters.environment }}_APPLY'
      pool:
        vmImage: ${{ parameters.vmImage }}
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName:  ${{ variables.ARTIFACT_NAME }}
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: TerraformInstaller@0
        displayName: 'Install Terraform latest'
      - task: TerraformTaskV3@3
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          backendServiceAWS: ${{ parameters.backendServiceAWS }}
          backendAWSBucketName: ${{ parameters.backendAWSBucketName }}
          backendAWSKey: 'terraform/terraform.tfstate'
      - task: TerraformTaskV3@3
        displayName: 'TerraformWorkspace ${{ parameters.environment }}'
        inputs:
          provider: aws
          command: custom
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          customCommand: workspace
          commandOptions: 'select ${{ parameters.environment }}'
          environmentServiceNameAWS: ${{ parameters.backendServiceAWS }}
          backendServiceAWS: ${{ parameters.backendServiceAWS }}
          backendAWSBucketName: ${{ parameters.backendAWSBucketName }}
          backendAWSKey: terraform/terraform.tfstate
      - task: TerraformTaskV3@3
        displayName: 'Terraform plan: aws'
        inputs:
          provider: aws
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: ${{ parameters.backendServiceAWS }}
      - task: TerraformTaskV3@3
        displayName: 'Terraform apply: aws'
        inputs:
          provider: aws
          command: apply
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: ${{ parameters.backendServiceAWS }}

